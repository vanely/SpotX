import { Request, Response } from 'express';
import { CategoriesService } from '@/services/categories.service';
import { HTTP_STATUS, SUCCESS_MESSAGES } from '@/utils/constants';
import { asyncHandler } from '@/middleware/error.middleware';
import { AuthenticatedRequest } from '@/middleware/auth.middleware';

export class CategoriesController {
  private categoriesService: CategoriesService;

  constructor() {
    this.categoriesService = new CategoriesService();
  }

  // Get all categories
  getAllCategories = asyncHandler(async (req: Request, res: Response): Promise<void> => {
    const categories = await this.categoriesService.getAllCategories();

    res.status(HTTP_STATUS.OK).json({
      success: true,
      data: {
        categories,
      },
    });
  });

  // Get official categories only
  getOfficialCategories = asyncHandler(async (req: Request, res: Response): Promise<void> => {
    const categories = await this.categoriesService.getOfficialCategories();

    res.status(HTTP_STATUS.OK).json({
      success: true,
      data: {
        categories,
      },
    });
  });

  // Get category by ID
  getCategoryById = asyncHandler(async (req: Request, res: Response): Promise<void> => {
    const { categoryId } = req.params;

    const category = await this.categoriesService.getCategoryById(categoryId);

    if (!category) {
      res.status(HTTP_STATUS.NOT_FOUND).json({
        success: false,
        message: 'Category not found',
      });
      return;
    }

    res.status(HTTP_STATUS.OK).json({
      success: true,
      data: {
        category,
      },
    });
  });

  // Get category by slug
  getCategoryBySlug = asyncHandler(async (req: Request, res: Response): Promise<void> => {
    const { slug } = req.params;

    const category = await this.categoriesService.getCategoryBySlug(slug);