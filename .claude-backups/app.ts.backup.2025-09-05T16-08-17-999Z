import express, { Application } from 'express';
import cors from 'cors';
import helmet from 'helmet';
import compression from 'compression';
import rateLimit from 'express-rate-limit';
import dotenv from 'dotenv';

// Import routes
import { authRoutes } from '@/routes/auth.routes';
import { uploadsRoutes } from '@/routes/uploads.routes';

// Import middleware
import { errorHandler, notFound } from '@/middleware/error.middleware';

// Import constants
import { APP_CONFIG, RATE_LIMIT_CONFIG } from '@/utils/constants';

// Load environment variables
dotenv.config();

class App {
  public app: Application;

  constructor() {
    this.app = express();
    this.initializeMiddleware();
    this.initializeRoutes();
    this.initializeErrorHandling();
  }

  private initializeMiddleware(): void {
    // Security middleware
    this.app.use(helmet({
      crossOriginResourcePolicy: { policy: "cross-origin" },
      contentSecurityPolicy: {
        directives: {
          defaultSrc: ["'self'"],
          styleSrc: ["'self'", "'unsafe-inline'"],
          scriptSrc: ["'self'"],
          imgSrc: ["'self'", "data:", "https:"],
          connectSrc: ["'self'"],
          fontSrc: ["'self'"],
          objectSrc: ["'none'"],
          mediaSrc: ["'self'"],
          frameSrc: ["'none'"],
        },
      },
    }));

    // CORS configuration
    this.app.use(cors({
      origin: [
        APP_CONFIG.FRONTEND_URL,
        'http://localhost:3000',
        'http://localhost:5173',
        'http://localhost:8080',
      ],
      credentials: true,
      methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],
      allowedHeaders: ['Content-Type', 'Authorization'],
    }));

    // Rate limiting
    const limiter = rateLimit({
      windowMs: RATE_LIMIT_CONFIG.windowMs,
      max: RATE_LIMIT_CONFIG.maxRequests,
      message: {
        success: false,
        message: 'Too many requests from this IP, please try again later.',
      },
      standardHeaders: true,
      legacyHeaders: false,
    });
    this.app.use('/api/', limiter);

    // Body parsing middleware
    this.app.use(express.json({ limit: '10mb' }));
    this.app.use(express.urlencoded({ extended: true, limit: '10mb' }));

    // Compression middleware
    this.app.use(compression());

    // Request logging in development
    if (process.env.NODE_ENV === 'development') {
      this.app.use((req, res, next) => {
        console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);
        next();
      });
    }

    // Health check endpoint
    this.app.get('/health', (req, res) => {
      res.status(200).json({
        success: true,
        message: 'Server is running',
        timestamp: new Date().toISOString(),
        environment: process.env.NODE_ENV,
      });
    });

    // API info endpoint
    this.app.get('/api', (req, res) => {
      res.status(200).json({
        success: true,
        message: 'SpotX API v1.0',
        version: '1.0.0',
        endpoints: {
          auth: '/api/auth',
          uploads: '/api/uploads',
          spots: '/api/spots (coming soon)',
          categories: '/api/categories (coming soon)',
        },
        documentation: '/api/docs (coming soon)',
      });
    });
  }

  private initializeRoutes(): void {
    // API routes
    this.app.use('/api/auth', authRoutes);
    this.app.use('/api/uploads', uploadsRoutes);
    this.app.use('/api/spots', spotsRoutes);
    this.app.use('/api/categories', categoriesRoutes);
    this.app.use('/api/users', usersRoutes);
  } Future routes (placeholders)
    // this.app.use('/api/spots', spotsRoutes);
    // this.app.use('/api/categories', categoriesRoutes);
    // this.app.use('/api/users', usersRoutes);
  }

  private initializeErrorHandling(): void {
    // 404 handler
    this.app.use(notFound);

    // Global error handler
    this.app.use(errorHandler);
  }

  public listen(port: number): void {
    this.app.listen(port, () => {
      console.log(`🚀 SpotX API server is running on port ${port}`);
      console.log(`📍 Environment: ${process.env.NODE_ENV}`);
      console.log(`🌐 API Base URL: ${APP_CONFIG.API_BASE_URL}`);
      console.log(`🎯 Frontend URL: ${APP_CONFIG.FRONTEND_URL}`);
      
      if (process.env.NODE_ENV === 'development') {
        console.log(`🔍 Health check: ${APP_CONFIG.API_BASE_URL}/health`);
        console.log(`📊 API info: ${APP_CONFIG.API_BASE_URL}/api`);
      }
    });
  }

  public getApp(): Application {
    return this.app;
  }
}

export default App;
